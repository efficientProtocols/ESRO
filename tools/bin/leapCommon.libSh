
. ${opBinBase}/opDoAtAsLib.sh

leapRunBaseDir=/here/public/server/leap/${opRunHostName}

leapSwBaseDir=/opt/public/mma/leap


function leapRunBasePrep {
  leapLogBaseDir=${leapRunBaseDir}/log
  leapConfigBaseDir=${leapRunBaseDir}/config
  leapSpoolBaseDir=${leapRunBaseDir}/spool

  if [[ ! -d ${leapRunBaseDir} ]] ; then
    if [[ -d /tmp/leap ]] ; then
      leapRunBaseDir=/tmp/leap
    else
      opDoComplain mkdir -p ${leapRunBaseDir} || leapRunBaseDir=/tmp/leap
    fi
     leapLogBaseDir=${leapRunBaseDir}/log
     leapConfigBaseDir=${leapRunBaseDir}/config
     leapSpoolBaseDir=${leapRunBaseDir}/spool
     opDoComplain mkdir -p ${leapLogBaseDir} || return
     opDoComplain mkdir -p ${leapConfigBaseDir} || return
     opDoComplain mkdir -p ${leapSpoolBaseDir} || return
  fi
  if [[ "${leapRunBaseDir}_"  == "/tmp/leap_" ]] ; then
    ANT_raw "Using ${leapRunBaseDir} as leapRunBaseDir"
  fi
}

function leapRunBaseAssert {
  EH_assert [[ -d ${leapRunBaseDir} ]]
}

function leapSwBasePrep {
  if [[ -d ${leapSwBaseDir} ]] ; then
    leapBinBaseDir=${leapSwBaseDir}/bin
    leapManBaseDir=${leapSwBaseDir}/man
    leapDocBaseDir=${leapSwBaseDir}/doc
  else
    if [[ "${CURENVBASE}_" == "_" ]] ; then
      EH_problem "No ${leapSwBaseDir} and CURENVBASE not set"
      return 1
    else
      . ${CURENVBASE}/tools/targetProc.libSh
      targetParamsAnalyze || return 
      targetParamsDerivedAnalyze || return 
      leapBinBaseDir=${target_binPath}
    fi
  fi

}

function leapSwBaseAssert {
  EH_assert [[ -d ${leapSwBaseDir} ]]
}


function leapEsroPrep {
    leapSwBasePrep || return
    leapRunBasePrep || return

    esroPrvdrPduLog=${leapLogBaseDir}/esrosLog.pdu 
    esroPrvdrPduErr=${leapLogBaseDir}/esrosErr.pdu

    esroPrvdrConfigFile=${leapConfigBaseDir}/erop.ini
    esroPrvdrTraceFile=${leapLogBaseDir}/esros.trace

    esroPrvdrSocket=/tmp/SP

    esroSapUdpPortInvoker=2002
    esroSapUdpPortPerformer=2002

    esroSapSelOpsXmplInvoker=12
    esroSapSelOpsXmplPerformer=13

    esroPrvdrTraceOptions="-T G_,ffff  -T ESRO_,ffff  -T LOPS_,ffff -T EROP_,ffff -T FSM_,01 -T UDP_,ffff  -T SCH_,01 -T DU_,0400"

    esroUsrTraceOptions="-T G_,ffff  -T ESRO_,ffff"

    esroUsrCBTraceOptions="-T G_,ffff  -T ESRO_,ffff"

    esroOneTraceOptions="-T G_,ffff  -T ESRO_,ffff  -T IMQ_,ffff LOPS_,ffff -T EROP_,ffff -T FSM_,01 -T UDP_,ffff  -T SCH_,01 -T DU_,0400"

    esroOneCBTraceOptions="-T G_,ffff  -T ESRO_,ffff  -T IMQ_,ffff LOPS_,ffff -T EROP_,ffff -T FSM_,01 -T UDP_,ffff  -T SCH_,01 -T DU_,0400"

    vis_esroIniUpdate
}

function vis_esroIniUpdate {
  if [[ -e ${esroPrvdrConfigFile} ]] ; then    
    if [[ "${G_forceMode}_" == "force_" ]] ; then
	vis_esroIniOutput > ${esroPrvdrConfigFile}
    fi
  else
    vis_esroIniOutput > ${esroPrvdrConfigFile}
  fi
}

function vis_esroIniOutput {
  # Say Machine Generated by whom - when
 cat  << _EOF_
# ESROS Engine configurable parameters
#

[Params]
	Port Number 	      = 2002 
	Max SAPs    	      = 200
	Max Invokes    	      = 200
	Max Reference Numbers = 256
	Pdu Size    	      = 1500

[Timer Values]
	Acknowledgement    = 100
	Roundtrip          = 1000
	Retransmit         = 2000
	Max NSDU Life Time = 3000
	Retransmit Count   = 8
_EOF_
}


#
# ---------
#

function leapUsersAndGroupsAdd {
  print "Creating Basic Leap User Ids -- NOTYET"

  #${opBinBase}/opAcctGroups.sh -s gid_leapNofile -a verifyAndFix
  #${opBinBase}/opAcctGroups.sh -s gid_leap -a verifyAndFix
}

# mmaLeapProgramUsersAndGroupsDel
function mmaLeapUsersAndGroupsDel {
  print "Deleting Basic Leap User Ids -- NOTYET"

  #${opBinBase}/opAcctGroups.sh -s gid_leapNofile -a delete
  #${opBinBase}/opAcctGroups.sh -s gid_leap -a delete
}
