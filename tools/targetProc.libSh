#
# RCS Revision: $Id: targetProc.libSh,v 1.14 2005/03/02 20:38:46 pinneke Exp $
#

#
# Description:
#    This is a Shell script that supports building of
#    targets using mkp.sh
# 
#
#  Given: 
#       - Run Environment
#           opRunOsType
#           opRunOsRev
#           opRunMachineArch
#
#       - targetFamily.sh
#       - target.sh
#       - buildEnv.sh
#    
#  A series of parameters are derived to be used mostly by:
#       - mkp.sh
#       - swProc.sh 
#       - paramsExpand.sh
#
#  For mkp.sh the paramter file is
#       - mkpDefault.parSh
#       That file is generated once and used for all 
#       compiles resulting in speed improvements
#

#set -v

. ${CURENVBASE}/tools/target.sh

if [[ -f ${targetBuildEnvFile} ]] ; then
  . ${targetBuildEnvFile}
else
  EH_problem "NOT FOUND: ${targetBuildEnvFile}"
  exit 1
fi

if [[ -f ${targetProcLibFile} ]] ; then
  . ${targetProcLibFile}
else
  EH_problem "NOT FOUND: ${targetProcLibFile}"
  exit 1
fi

function buildEnvAnalyze {
  EH_assert [[ $# -eq 0 ]]

  if [[ "${buildEnvOS}_" == "default_" ]] ; then
    buildEnvOS=${opRunOsType}
  fi
  if [[ "${buildEnvOS}_" != "${opRunOsType}_" ]] ; then
    echo "Problem: buildEnvOS=${buildEnvOS}"
    return 1
  fi

  if [[ "${buildEnvShell}_" == "default_" ]] ; then
    buildEnvShell=bash
  fi

  if [[ "${buildEnvMake}_" == "default_" ]] ; then
    buildEnvMake=gmake
  fi

  if [[ "${buildEnvCompiler}_" == "default_" ]] ; then
    case ${opRunOsType} in
     CYGWIN_NT-*)
	   buildEnvCompiler=msc
	   ;;
     *)
	buildEnvCompiler=gcc
	;;
    esac
  fi

  # Not Used Yet
  if [[ "${buildEnvUtils}_" == "default_" ]] ; then
    buildEnvUtils=gnu
  fi
}


function targetParamsAnalyze {
  EH_assert [[ $# -eq 0 ]]

  EH_assert [[ "${targetProdName}_" != "_" ]] 
  # NOTYET, Pinneke to complete for all expected vars


  if [[ "${targetOS}_" == "default_" ]] ; then
    if [[ "${opRunOsType}_" == "CYGWIN_NT-5.1_" ]] ; then
      targetOS=WINNT
    else
      targetOS=${opRunOsType}
    fi
  fi

  # NOTYET, verify that the targetOS can be built here
  # if [[ "${targetOS}_" != "${opRunOsType}_" ]] ; then
  #   echo "Problem: targetOS=${targetOS}"
  #   return 1
  # fi

  if [[ "${targetArchType}_" == "default_" ]] ; then
    if [[ "${opRunOsType}_" == "CYGWIN_NT-5.1_" ]] ; then
      targetArchType=i386
    else
      targetArchType=${opRunMachineArch}
    fi
  fi
  # NOTYET, verify that the targetArchType can be built here
  # if [[ "${targetArchType}_" != "${opRunMachineArch}_" ]] ; then
  #   echo "Problem: targetArchType=${targetArchType}"
  #   return 1
  # fi

}

typeset mkpDefaultFile=${CURENVBASE}/tools/mkpDefault.parSh

function devStudioPath {

 . ${CURENVBASE}/tools/win32sdk.libSh
 wce3Tools_setPATH

 cat << _EOF_

export PATH=\${PATH}:${DEVSTUDIOPATH}/Common/MSDev98/Bin:${DEVSTUDIOPATH}/VC98/BIN:${WINCEROOT}/EVC/WCE300/BIN

_EOF_
}

function mkpParamsFilesGen {
  EH_assert [[ $# -eq 0 ]]

  if [[ -f ${mkpDefaultFile} ]] ; then
    ANT_raw "$0: Use mkpParamsFilesReGen. ${mkpDefaultFile}"
    return 1
  fi

  targetParamsAnalyze || return 
  buildEnvAnalyze || return 

 cat << _EOF_ > ${mkpDefaultFile}
# ${mkpDefaultFile}
# This File is Machine Generated by $0 
# Do Not hand edit
#
_EOF_

if [[ "${buildEnvCompiler}_" == "msc_" ]] ; then
  devStudioPath >> ${mkpDefaultFile}
fi

  cat << _EOF_ >> ${mkpDefaultFile}
buildEnvOS=${buildEnvOS}
buildEnvShell=${buildEnvShell}
buildEnvMake=${buildEnvMake}
buildEnvCompiler=${buildEnvCompiler}
buildEnvUtils=${buildEnvUtils}
#
targetOS=${targetOS}
targetArchType=${targetArchType}
#
targetFamilyName=${targetFamilyName}
targetName=${targetName}
targetProdName=${targetProdName}
#
targetReleaseNotesSpecificFile=${targetReleaseNotesSpecificFile}
targetBuildEnvFile=${targetBuildEnvFile}
#
targetProdStatus=${targetProdStatus}
targetProdRevNu=${targetProdRevNu}
#
targetDistMethod=${targetDistMethod}
targetDistFileBase=${targetDistFileBase}
targetDistUser=${targetDistUser}
#
targetFtpInstallDirRelative=${targetFtpInstallDirRelative}
targetFtpInstallDir=${targetFtpInstallDir}
targetWebInstallDirRelative=${targetWebInstallDirRelative}
targetWebInstallDir=${targetWebInstallDir}
#
_EOF_

  makeParamsOutput  >> ${mkpDefaultFile}

  if [[ "${G_verbose}_" == "verbose_" ]] ; then
    ls -l ${mkpDefaultFile}
  fi

  return 0
}

function mkpParamsFilesReGen {
  EH_assert [[ $# -eq 0 ]]

  PN_rmIfThere ${mkpDefaultFile}
  opDo rm ${mkpDefaultFile}
  #ls -l ${mkpDefaultFile}
  opDoComplain mkpParamsFilesGen || return
}

function mkpRun {
  #
  MKP="${CURENVBASE}/tools/mkp.sh"
  buildAllCmd="./buildall.sh"
  if [ ${traceLevel} ] ; then
    MKP="${MKP} -T ${traceLevel}"
    buildAllCmd="${buildAllCmd} -T ${traceLevel}"
  fi
  for i in ${mkpFlavor} ; do
    TM_trace 9 ${MKP}
    MKP="${MKP} -f ${i}"
    buildAllCmd="${buildAllCmd} -f ${i}"
  done
  return 0
}

function makeParamsOutput {
   EH_assert [[ $# -eq 0 ]]

   case ${buildEnvShell} in
     bash)
	   print "SHELL=`which ${buildEnvShell}`"
	   ;;
     *)
	EH_problem "${buildEnvShell}"
	return 1
	;;
   esac

    case ${buildEnvCompiler} in
     gcc)
 cat << _EOF_ 
CC=gcc
AS="as -"
LB="ar r"
RANLIB=ranlib
LK="gcc -g"
ETAGS=etags
_EOF_
	  ;;
     msc)
	  case ${targetArchType} in 
	    'arm')
	       CC_used=clarm.exe
	       ;;
	    *)
	       CC_used=cl.exe
	       ;;
	  esac
 cat << _EOF_ 
CC=${CC_used}
AS="tasm"
LB="win32lib.sh -c ${targetArchType} -s ${targetOS}"
RANLIB="echo Ranlib Not Used"
LK="win32link.sh -c ${targetArchType} -s ${targetOS} -f ${targetFamilyName}"
RC=rc
RCFLAGS="-r"
HC="hcrtf -xn"
ETAGS=etags
_EOF_
	  ;;
     *)
	EH_problem "${buildEnvCompiler}"
	return 1
	;;
   esac

   targetSpecMakeParamsOutput || return 

}

######

typeset target_osDirTag=""
typeset target_machineArchTag=""

function targetParamsDerivedAnalyze {
   EH_assert [[ $# -eq 0 ]]

   case ${targetOS} in
     Linux)
	    target_osDirTag=linux
	    target_machineArchTag="${targetArchType}"
	    ;;
     SunOS)
	    target_osDirTag=sol2
	    target_machineArchTag="${targetArchType}"
	    ;;
     WINNT)
	    target_osDirTag=winnt
	    target_machineArchTag="x86"
	    ;;
     wce3)
	    target_osDirTag=ppc3
	    target_machineArchTag="${targetArchType}"
	    ;;
     *)
	EH_problem "${targetOS}"
	return 1
	;;
   esac

   case ${targetArchType} in
     'i686' | 'EMULATOR')
	    target_machineArchTag="x86"
	    ;;
     *)
	target_machineArchTag=${target_machineArchTag}
	;;
   esac

   target_libcPath=${CURENVBASE}/results/${target_osDirTag}/${target_machineArchTag}/libc
   target_binPath=${CURENVBASE}/results/${target_osDirTag}/${target_machineArchTag}/bin
   target_manPath=${CURENVBASE}/results/share/man
   target_dataPath=${CURENVBASE}/results/share/data
}
